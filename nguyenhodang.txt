1. 
git init
touch c1.txt
git add c1.txt
git commit -m "1" 
touch c2.txt
git add c2.txt
git commit -m "2" 
touch c3.txt
git add c3.txt
git commit -m "3" 
git branch feature master
git checkout feature
touch c4.txt
git add c4.txt
git commit -m "4" 
touch c5.txt
git add c5.txt
git commit -m "5" 
git checkout master
git branch bug master
git checkout bug
touch c6.txt
git add c6.txt
git commit -m "6" 
touch c7.txt
git add c7.txt
git commit -m "7" 
touch c8.txt
git add c4.txt
git commit -m "8" 

2. git checkout feature
   git merge bug
   :wq

3. git checkout bug
   git rebase feature

4. So sánh git merge và git rebase
Giống: Đều sử dụng để gộp nhánh
Khác: 
  -git merge: tạo một commit mới ngay khi gộp 2 nhánh lại, hình thành đồ thị "kim cương"
  -git rebase: không tạo thêm commit mới sau khi gộp 2 nhánh lại, hiển thị dưới dạng đồ thị tuyến tính
Dùng git merge khi muốn bảo toàn lịch sử commit. Dùng git rebase khi muốn lịch sử commit gọn gàng hơn.

5. Phân biệt git fetch và git clone:
git fetch: tải về dữ liệu từ remote repo, cho phép liên kết local repo với remote repo
git clone: sao chép một remote repo về local, không liên kết local repo và remote repo lại được

6. Phân biệt git fetch và git pull:
git fetch: tải về dữ liệu từ remote repo
git pull: sự kết hợp việc tải về dữ liệu từ remote repo và gộp các nhánh lại (merge & rebase)

7. Phân biệt git pull và git pull --rebase:
git pull: lệnh sẽ tự động dùng merge để gộp nhánh
git pull --rebase: chỉ định chọn phương thức rebase để gộp nhánh

8. Git log dùng để xem lịch sử tạo version - commit.

9. Git status dùng để kiểm tra, quản lí các tập tin trong local repo đã có thay đổi gì hay chưa.

10. Git add dùng để đưa file đến staging area.

11. Git commit dùng để ghi lại nội dung đã thay đổi của file trong staging area.

12. Lệnh tạo branch ở local
git checkout master
git branch <tên-nhánh> master

13. Lệnh xóa branch ở local
git branch -d <tên-nhánh>

14. Lệnh xóa branch ở remote
git push -d <tên-remote> <tên-nhánh>

15. Nhánh trung gian là nhánh local được tạo từ nhánh trên remote repo sau khi fetch về.

16. Detach HEAD: Là con trỏ đang trỏ đến commit hiện tại.

17. Phân biệt HEAD và BRANCH:
-HEAD: Một con trỏ đặc biệt có thể trỏ đến các commit và trỏ đến nhánh.
-BRANCH: Một con trỏ, trỏ đến một commit và có thể di chuyển được.

18. Các cách xóa commit:
a) Sử dụng git reset quay về trước 1 commit
git reset --hard HEAD~
b) Sử dụng -amend để ghi đè commit
git commit --amend

19. Các trạng thái của file trong git:
-Untracked: Các file chưa được commit hoặc ở trong staging area
-Staged: Các file đã được đưa vào stagin area
-Unmodified: Các file đã được lưu trữ.
-Modified: Các file có chứa thông tin chưa được lưu trữ, cần phải được commit lại.

20. Các bước cần thực hiện khi nhận 1 task:
-Tạo kho lưu trữ mới: git init.
-Tạo một branch trên remote repo đại diện cho task đấy.
-Dùng git fetch để tải về dữ liệu từ remote repo
-Tạo một nhánh trung gian trên local từ nhánh repo, checkout đến nhánh trung gian đấy.
-Thực hiện task (add, commit...)
-Trỏ đến nhánh trên remote repo đại diện cho task đấy, sử dụng lệnh merge hoặc rebase để gộp nhánnh trung gian vào nhánh trên remote repo. 
-Đẩy task lên nhánh trên remote repo. Nếu bị reject khi push thì fetch và rebase lại.



